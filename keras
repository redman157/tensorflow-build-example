from __future__ import print_function
import tensorflow as tf
from tensorflow import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import optimizers
import os
from requests import get
batch_size = 32
num_classes = 10
epochs = 100
data_augmentation = True
num_predictions = 20
cifar10 = tf.keras.datasets.cifar10.load_data()
save_dir = os.path.join(os.getcwd(), 'saved_models')
(x_train,y_train),(x_test,y_test) = cifar10
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

model = Sequential()
model.add(Conv2D(32,(3,3),padding='same',input_shape = x_train.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(64,(3,3),padding='same'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))

model.compile(optimizer = 'adam',
             loss ='categorical_crossentropy',
             metrics = ['accuracy'])
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /=255
x_test /= 255
model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          validation_data=(x_test, y_test),
          shuffle=True)
scores = model.evaluate(x_test,y_test,verbose = 1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])
